{"version":3,"sources":["app/helpers/classname.js","app/components/Table/Table.jsx","app/containers/App/App.jsx","entry.js"],"names":["cn","withNaming","e","m","Table","props","tableClassName","paginationClassName","data","header","order","useState","currentPage","setCurrentPage","sorting","setSorting","Object","fromEntries","map","fieldId","filtering","setFiltering","useEffect","records","useMemo","record","id","slice","sort","a","b","values","some","value","Boolean","filter","keys","every","String","toLowerCase","includes","className","onClick","onChange","event","target","placeholder","recordsOnPage","renderBody","pagesTotal","Math","ceil","length","pages","Array","fill","_","i","page","active","renderPagination","appClassName","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e173f13d.chunk.js","sourcesContent":["import { withNaming } from '@bem-react/classname';\n\nexport const cn = withNaming({ e: '__', m: '--' });\n","import React, { useState, useEffect, useMemo } from \"react\";\n\nimport { cn } from \"../../helpers/classname\";\n\nimport \"./Table.scss\";\n\nexport const Table = (props) => {\n  const tableClassName = cn(\"table\");\n  const paginationClassName = cn(\"pagination\");\n\n  const { data } = props;\n  const { header, order } = data;\n\n  const pageSize = 50;\n\n  const [currentPage, setCurrentPage] = useState(0);\n  const [sorting, setSorting] = useState(null);\n  const [filtering, setFiltering] = useState(\n    Object.fromEntries(order.map((fieldId) => [fieldId, \"\"]))\n  );\n\n  useEffect(() => {\n    setCurrentPage(0);\n  }, [sorting, filtering])\n\n  const indexedRecords = useMemo(() => {\n    const { records } = data;\n\n    return records.map((record, id) => {\n      return { ...record, id };\n    });\n  }, [data.records]);\n\n  let records = indexedRecords.slice();\n\n  if (sorting !== null) {\n    records.sort((a, b) => {\n      if (sorting.order === \"asc\") {\n        if (a[sorting.fieldId] < b[sorting.fieldId]) {\n          return -1;\n        }\n        if (a[sorting.fieldId] > b[sorting.fieldId]) {\n          return 1;\n        }\n      }\n\n      if (a[sorting.fieldId] > b[sorting.fieldId]) {\n        return -1;\n      }\n      if (a[sorting.fieldId] < b[sorting.fieldId]) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  if (Object.values(filtering).some((value) => Boolean(value))) {\n    records = records.filter((record) => {\n      return Object.keys(filtering).every((fieldId) =>\n        String(record[fieldId]).toLowerCase().includes(filtering[fieldId].toLowerCase())\n      );\n    });\n  }\n\n  const renderHeader = () => {\n    return (\n      <thead className={tableClassName(\"head\")}>\n        <tr className={tableClassName(\"row\")}>\n          {order.map((fieldId) => {\n            const handleSortClick = () => {\n              setSorting((sorting) => {\n                if (sorting === null || sorting.fieldId !== fieldId) {\n                  return {\n                    fieldId,\n                    order: \"asc\",\n                  };\n                }\n\n                if (sorting !== null && sorting.order === \"asc\") {\n                  return {\n                    fieldId,\n                    order: \"desc\",\n                  };\n                }\n\n                if (sorting !== null && sorting.order === \"desc\") {\n                  return null;\n                }\n              });\n            };\n\n            return (\n              <th className={tableClassName(\"header\")} key={fieldId}>\n                {header[fieldId]}\n                <button\n                  className={tableClassName(\"sort\")}\n                  onClick={handleSortClick}\n                ></button>\n              </th>\n            );\n          })}\n        </tr>\n        <tr className={tableClassName(\"row\")}>\n          {order.map((fieldId) => {\n            const handleFilterChange = (event) => {\n              const { value } = event.target;\n              setFiltering((filtering) => {\n                return {\n                  ...filtering,\n                  [fieldId]: value,\n                };\n              });\n            };\n\n            return (\n              <td className={tableClassName(\"data\")}>\n                <input\n                  className={tableClassName(\"input\")}\n                  value={filtering[fieldId]}\n                  onChange={handleFilterChange}\n                  placeholder={`Filter ${header[fieldId].toLowerCase()}...`}\n                  key={fieldId}\n                ></input>\n              </td>\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  };\n\n  const renderBody = () => {\n    const recordsOnPage = records.slice(\n      currentPage * pageSize,\n      pageSize * (currentPage + 1)\n    );\n\n    return (\n      <tbody className={tableClassName(\"body\")}>\n        {recordsOnPage.map((record) => {\n          const { id } = record;\n\n          return (\n            <tr className={tableClassName(\"row\")} key={id}>\n              {order.map((fieldId) => {\n                return (\n                  <td className={tableClassName(\"data\")} key={fieldId}>\n                    {record[fieldId]}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  };\n\n  const renderPagination = () => {\n    const pagesTotal = Math.ceil(records.length / pageSize);\n\n    const pages = Array(pagesTotal)\n      .fill(null)\n      .map((_, i) => i);\n\n    return (\n      <div className={paginationClassName(\"layout\")}>\n        {pages.map((page) => {\n          const handleClick = () => {\n            setCurrentPage(page);\n          };\n\n          return (\n            <button\n              className={\n                currentPage === page\n                  ? paginationClassName(\"button\", { active: true })\n                  : paginationClassName(\"button\")\n              }\n              key={page}\n              onClick={handleClick}\n            >\n              {page + 1}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <table className={tableClassName(\"layout\")}>\n        {renderHeader()}\n        {renderBody()}\n      </table>\n      {renderPagination()}\n    </div>\n  );\n};\n","import \"./App.scss\";\n\nimport { Table } from \"../../components/Table\";\n\nimport { cn } from \"../../helpers/classname\";\n\nimport data from \"../../data/table-data.json\";\n\nconst appClassName = cn(\"app\");\n\nexport const App = () => {\n  return (\n    <div className={appClassName(\"layout\")}>\n      <Table data={data} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}